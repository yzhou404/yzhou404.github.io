<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yzhou404.github.io</id>
    <title>博客|Stray Birds</title>
    <updated>2021-04-20T10:24:45.031Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yzhou404.github.io"/>
    <link rel="self" href="https://yzhou404.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://yzhou404.github.io/images/avatar.png</logo>
    <icon>https://yzhou404.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 博客|Stray Birds</rights>
    <entry>
        <title type="html"><![CDATA[C++类模板实现的栈类]]></title>
        <id>https://yzhou404.github.io/post/clei-mo-ban-shi-xian-de-zhan-lei/</id>
        <link href="https://yzhou404.github.io/post/clei-mo-ban-shi-xian-de-zhan-lei/">
        </link>
        <updated>2021-04-20T10:20:02.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-c++">/*********************Stack类模板***********************/
/*
接口函数:   StackClass()            -默认构造函数
            void push(T data);      -压栈
            T pop();                -弹栈
            T getTop();             -获取栈顶元素
            bool isEmpty();         -判断栈是否为空
            bool isFull();          -判断栈是否为满
            void setNull();         -栈清空
            class Empty{};          -异常内部类，当栈下溢抛出
            class Full{};           -异常内部类，当栈上溢抛出
*/
#ifndef STACKCLASS_HPP
#define STACKCLASS_HPP

template &lt;class T, int capacity = 100&gt;
class StackClass
{
private:
    T *point;
    int top;

public:
    StackClass();
    ~StackClass();
    void push(T data);
    T pop();
    T getTop();
    bool isEmpty();
    bool isFull();
    void setNull();
    class Empty
    {
    };
    class Full
    {
    };
};

template &lt;class T, int capacity&gt;
StackClass&lt;T, capacity&gt;::StackClass()
{
    //size = capacity;
    top = -1;
    point = new T[capacity];
}
template &lt;class T, int capacity&gt;
StackClass&lt;T, capacity&gt;::~StackClass()
{
    delete[] point;
}
template &lt;class T, int capacity&gt;
void StackClass&lt;T, capacity&gt;::push(T data)
{
    if (isFull())
    {
        throw Full();
    }
    else
    {
        point[++top] = data;
    }
}
template &lt;class T, int capacity&gt;
T StackClass&lt;T, capacity&gt;::pop()
{
    if (isEmpty())
    {
        throw Empty();
    }
    else
    {
        return point[top--];
    }
}
template &lt;class T, int capacity&gt;
T StackClass&lt;T, capacity&gt;::getTop()
{
    if (!isEmpty())
        return point[top];
}
template &lt;class T, int capacity&gt;
bool StackClass&lt;T, capacity&gt;::isEmpty()
{
    if (top == -1)
        return true;
    else
        return false;
}
template &lt;class T, int capacity&gt;
bool StackClass&lt;T, capacity&gt;::isFull()
{
    if (top == capacity - 1)
        return true;
    else
        return false;
}
template &lt;class T, int capacity&gt;
void StackClass&lt;T, capacity&gt;::setNull()
{
    top = -1;
}

#endif
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://yzhou404.github.io/post/hello-gridea/</id>
        <link href="https://yzhou404.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>